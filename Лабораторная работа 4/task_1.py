# TODO: описать базовый класс
class GreekGod:
    """
    Базовый класс для древнегреческих богов.
    Определяет общие характеристики и методы, присущие богам.
    """

    def __init__(self, name: str, domain: str) -> None:
        """
        Инициализирует экземпляр класса GreekGod.

        :param name: Имя бога.
        :param domain: Область, за которую отвечает бог.
        """
        self._name = name  # Приватный атрибут: имя бога
        self._domain = domain  # Приватный атрибут: область бога

    def worship(self) -> str:
        """
        Описывает акты поклонения богу.

        :return: Сообщение о поклонении богу.
        """
        return f'{self._name} принимается с благоговением!'

    def __str__(self) -> str:
        """
        Возвращает строковое представление объекта GreekGod.

        :return: Строка с именем и областью бога.
        """
        return f'{self._name}, Бог области {self._domain}'

    def __repr__(self) -> str:
        """
        Возвращает неформальное строковое представление объекта GreekGod.

        :return: Строка с подробной информацией о боге.
        """
        return f'GreekGod(name=\'{self._name}\', domain=\'{self._domain}\')'


# TODO: описать дочерний класс

class Hades(GreekGod):
    """
    Класс для бога Аида, бога подземного мира.
    Наследует от класса GreekGod и добавляет специфические характеристики.
    """

    def __init__(self, name: str = "Аид", domain: str = "Подземный мир",
                 known_for: str = "владеет душами мертвых") -> None:
        """
        Инициализирует экземпляр класса Hades.

        :param name: Имя бога (по умолчанию Аид).
        :param domain: Область, за которую отвечает бог (по умолчанию Подземный мир).
        :param known_for: Известен за... (специфическая характеристика для Аида).
        """
        super().__init__(name, domain)  # Унаследованный конструктор
        self._known_for = known_for  # Приватный атрибут: чем известен бог

    def worship(self) -> str:
        """
        Описывает акты поклонения Аиду.

        Переопределяет метод из базового класса, добавляя специфическое сообщение для Аида,
        подчеркивая его власть над душами в подземном мире.

        :return: Сообщение о поклонении Аиду.
        """
        return f'Поклонение {self._name}у включает жертвы и обряды для усопших, чтобы угодить ему и умилостивить его!'

    def __str__(self) -> str:
        """
        Возвращает строковое представление объекта Hades.

        :return: Строка с именем, областью и известностью бога.
        """
        return f'{super().__str__()} и {self._known_for}'

    def __repr__(self) -> str:
        """
        Возвращает неформальное строковое представление объекта Hades.

        :return: Строка с подробной информацией о Аиде.
        """
        return f'Hades(name=\'{self._name}\', domain=\'{self._domain}\', known_for=\'{self._known_for}\')'


class Poseidon(GreekGod):
    """
    Класс для бога Посейдона, бога морей.
    Наследует от класса GreekGod и добавляет специфические характеристики.
    """

    def __init__(self, name: str = "Посейдон", domain: str = "Моря и океаны",
                 trident_power: str = "управляет бурями") -> None:
        """
        Инициализирует экземпляр класса Poseidon.

        :param name: Имя бога (по умолчанию Посейдон).
        :param domain: Область, за которую отвечает бог (по умолчанию Моря и океаны).
        :param trident_power: Специфическая характеристика силы Посейдона.
        """
        super().__init__(name, domain)  # Унаследованный конструктор
        self._trident_power = trident_power  # Приватный атрибут: сила Посейдона

    def worship(self) -> str:
        """
        Описывает акты поклонения Посейдону.

        Переопределяет метод из базового класса, добавляя специфическое сообщение для Посейдона,
        подчеркивая его связь с морем и бурями.

        :return: Сообщение о поклонении Посейдону.
        """
        return f'Поклонение {self._name}у включает жертвоприношения на берегу и морские обряды для успокоения бурь и ' \
               f'защиты моряков!'

    def __str__(self) -> str:
        """
        Возвращает строковое представление объекта Poseidon.

        :return: Строка с именем, областью и силой бога.
        """
        return f'{super().__str__()} и {self._trident_power}'

    def __repr__(self) -> str:
        """
        Возвращает неформальное строковое представление объекта Poseidon.

        :return: Строка с подробной информацией о Посейдоне.
        """
        return f'Poseidon(name=\'{self._name}\', domain=\'{self._domain}\', trident_power=\'{self._trident_power}\')'


# Пример использования классов
if __name__ == "__main__":
    hades = Hades()
    poseidon = Poseidon()

    print(hades)
    print(hades.worship())
    print(repr(hades))

    print(poseidon)
    print(poseidon.worship())
    print(repr(poseidon))